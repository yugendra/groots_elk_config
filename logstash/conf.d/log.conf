input {
  beats  {    port => 5044  }
  #stdin { }
}

filter {
    fingerprint {
        source => "message"
        target => "[@metadata][fingerprint]"
        method => "MURMUR3"
    }

    grok {
        patterns_dir => ["/etc/logstash/patterns"]

        match => {'message' => [
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: client=%{GREEDYDATA:client}',
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: %{GREEDYDATA:loglevel}: header Subject:%{GREEDYDATA:SUBJECT} from %{GREEDYDATA}; from=%{GREEDYDATA}',
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: message-id=\<%{GREEDYDATA:MSG_ID}\>',
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: %{GREEDYDATA:loglevel}: header Content-Disposition: attachment; filename="%{GREEDYDATA:ATTACHMENT}" from %{GREEDYDATA}; from=%{GREEDYDATA}',
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: %{GREEDYDATA:loglevel}: header Content-Disposition: attachment; filename=%{GREEDYDATA:ATTACHMENT} from %{GREEDYDATA}; from=%{GREEDYDATA}',
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: from=<%{email:SENDER}>, size=%{NUMBER:SIZE}, %{GREEDYDATA}',
            '%{timestamppostfix} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: to=<%{email:RECIPIENT}>, relay=%{GREEDYDATA:RELAYED_TO}, delay=%{GREEDYDATA}, dsn=%{GREEDYDATA}, status=%{GREEDYDATA:D_STATUS} \(%{GREEDYDATA}\)',
            '%{timestamppostfix:logtimestamp} %{GREEDYDATA:HOST} %{GREEDYDATA:MTA}/%{GREEDYDATA:MTA_FUNCTION}\[%{GREEDYDATA}\]: %{GREEDYDATA:LOG_ID}: %{GREEDYDATA:MSG_STATUS}'
        ]}
    }

    grok {
        patterns_dir => ["/etc/logstash/patterns"]

        match => {'message' => '%{timestampmaillog:logtimestamp} %{WORD:hostname} %{WORD:MTA}: %{GREEDYDATA}\["Status"="%{WORD:STATUS}"\]%{GREEDYDATA}\["Sender"="%{email:SENDER}"\]%{GREEDYDATA}\["Recipient"="%{email:RECIPIENT}"\]%{GREEDYDATA}\["Date"="%{GREEDYDATA:qmailtime}"\]%{GREEDYDATA}\["MessageID"="%{GREEDYDATA:MessageID}"\]%{GREEDYDATA}\["Subject"="%{GREEDYDATA:SUBJECT}"\]%{GREEDYDATA}\["SizeinKB"="%{NUMBER:SizeinKB}"\]%{GREEDYDATA}\["AttachmentCount"="%{NUMBER:AttachmentCount}"\]%{GREEDYDATA}\["AttachmentList"="%{GREEDYDATA:AttachmentList}"\]%{GREEDYDATA}\["ReturnCode"="%{GREEDYDATA}'}
    }

    grok {
        patterns_dir => ["/etc/logstash/patterns"]

        match => {'message' => '%{timestampmailstat:logtimestamp}%{SPACE}%{GREEDYDATA}%{SPACE}Clear:RC:0\(%{GREEDYDATA:RELAYED_FROM}\):%{SPACE}%{BASE16FLOAT}%{SPACE}%{NUMBER:SIZE}%{SPACE}%{email:SENDER}%{SPACE}%{email:RECIPIENT}%{SPACE}%{GREEDYDATA:SUBJECT}%{SPACE}<%{GREEDYDATA:MSG_ID}>%{SPACE}%{GREEDYDATA:ATTACHMENT}'}

        add_field => {
                        "MTA" => "QMAIL"
                     }
    }

    if [MTA] in ['postfix-SMF', 'postfix-bulkSplit'] and [MTA_FUNCTION] in ['smtpd', 'cleanup', 'qmgr', 'smtp'] {
        if [MTA_FUNCTION] == 'smtpd' {
            aggregate {
                task_id => "%{LOG_ID}"
                code => "map['LOG_ID'] = event.get('LOG_ID')"
                map_action => 'create'
            }
            drop { }
        }
        if [MTA_FUNCTION] == 'cleanup' {
            aggregate {
                task_id => "%{LOG_ID}"
                code => "map['SUBJECT'] ||= event.get('SUBJECT')
                         map['MSG_ID'] ||= event.get('MSG_ID')
                         map['ATTACHMENT'] ||= ''
                         map['ATTACHMENT'] << event.get('ATTACHMENT')
                         map['ATTACHMENT'] << ', '"

                map_action => 'update'
            }
            drop { }
        }
        if [MTA_FUNCTION] == 'qmgr' and [MSG_STATUS] != 'removed' and [MSG_STATUS] != 'bounced' and [MSG_STATUS] != 'deferred' {
            aggregate {
                task_id => "%{LOG_ID}"
                code => "map['SENDER'] ||= event.get('SENDER');
                         map['SIZE'] ||= event.get('SIZE')"
                map_action => 'update'
            }
            drop { }
        }
        if [MTA_FUNCTION] == 'smtp' {
            aggregate {
                task_id => "%{LOG_ID}"
                code => "map['RECIPIENT'] ||= ''
                         map['RECIPIENT'] << event.get('RECIPIENT')
                         map['RECIPIENT'] << ', '
                         map['DELIVERY_STATUS'] ||= ''
                         map['DELIVERY_STATUS'] << event.get('RECIPIENT')
                         map['DELIVERY_STATUS'] << ':'
                         map['DELIVERY_STATUS'] << event.get('RELAYED_TO')
                         map['DELIVERY_STATUS'] << ':'
                         map['DELIVERY_STATUS'] << event.get('D_STATUS')
                         map['DELIVERY_STATUS'] << ', '"
                map_action => 'update'
            }
            drop { }
        }
        if [MSG_STATUS] == 'removed' or [MSG_STATUS] == 'bounced' or [MSG_STATUS] == 'deferred' {
            aggregate {
                task_id => "%{LOG_ID}"
                code => "event.set('LOG_ID', map['LOG_ID']);
                            event.set('SUBJECT', map['SUBJECT']);
                            event.set('MSG_ID', map['MSG_ID']);
                            event.set('ATTACHMENT', map['ATTACHMENT']);
                            event.set('SENDER', map['SENDER']);
                            event.set('SIZE', map['SIZE']);
                            event.set('RECIPIENT', map['RECIPIENT']);
                            event.set('DELIVERY_STATUS', map['DELIVERY_STATUS']);"
                map_action => 'update'
                end_of_task => true
                timeout => 43200
            }
            date{
                match => ["logtimestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss"]
                target => "@timestamp"
                #timezone => "UTC"
            }
            mutate {
                copy => { "SENDER" => "SENDER_tmp"  }
            }
            mutate {
                split => { "SENDER_tmp" => "@" }
                add_field => { "LOCAL_DOMAIN" => "%{SENDER_tmp[1]}" }
            }
            mutate {
                remove_field => ['message', 'logtimestamp', SENDER_tmp]
            }
        }
    } else if [MTA] == 'QMAIL'{
        date{
                match => ["logtimestamp", "E, dd MMM yyyy HH:mm:ss"]
                target => "@timestamp"
                #timezone => "UTC"
            }
            
        mutate {
            copy => { "RECIPIENT" => "RECIPIENT_tmp"  }
        }
        
        mutate {
            split => { "RECIPIENT_tmp" => "@" }
            add_field => { "LOCAL_DOMAIN" => "%{RECIPIENT_tmp[1]}" }
        }
        
        mutate {
            gsub => [
                        "ATTACHMENT", "\d*\.\d*-\d.Mailserver:\d*( |)", "",
                        "ATTACHMENT", ":\d*", "",
                        "ATTACHMENT", "\s", ", ",
                        "ATTACHMENT", ",\s\z", ""
                    ]

            remove_field => ['message', 'logtimestamp', 'GREEDYDATA', RECIPIENT_tmp]
        }
    } else if [MTA] == 'qmail'{
        date{
                match => ["logtimestamp", "MMM dd HH:mm:ss", "MMM  dd HH:mm:ss"]
                target => "@timestamp"
                #timezone => "UTC"
            }
        
        mutate {
            copy => { "RECIPIENT" => "RECIPIENT_tmp"  }
        }
        
        mutate {
            split => { "RECIPIENT_tmp" => "@" }
            add_field => { "LOCAL_DOMAIN" => "%{RECIPIENT_tmp[1]}" }
        }
        
        mutate {
            remove_field => ['message', 'logtimestamp', RECIPIENT_tmp]
        }
    } else {
        drop { }
    }
}


output {
    #stdout { 
    #    codec => rubydebug { metadata => true }
    #}
    
    file {
        create_if_deleted => true
        path => "/var/log/logstash/logstash_log"
        codec => "rubydebug"
    }

    elasticsearch {
        hosts => ["localhost:9200"]
        user => admin
        password => admin
        ssl => true
        ssl_certificate_verification => true
        cacert  => "/etc/elasticsearch/root-ca.pem"
        #sniffing => true
        manage_template => false
        index => "%{[LOCAL_DOMAIN]}-%{+YYYY.MM.dd}"
        document_type => "%{[@metadata][type]}"
        document_id => "%{[@metadata][fingerprint]}"
    }
}
